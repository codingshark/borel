#include "node.h"

node::node ()
{
	cfg_type = 0;
}

node::node(const node & a_node)
{
	cfg_type = a_node.cfg_type;
	usr_type = a_node.usr_type;
	name = a_node.name;
	r_rules	= a_node.r_rules;
}

node::~node ()
{
}

node & node::operator = (const node & a_node)
{
	cfg_type = a_node.cfg_type;
	usr_type = a_node.usr_type;
	name = a_node.name;
	r_rules	= a_node.r_rules;
	
	return *this;
}

void node::clear()
{
	cfg_type = 0;
	usr_type = "";
	name = "";
	
	r_rules.clear();
}

node::var::var(const string & a_name, int a_cfg_type): name(a_name), cfg_type(a_cfg_type)
{
}

node::var::~var()
{
}

node::var & node::var::operator = (const node::var & a_var)
{
	name = a_var.name;
	cfg_type = a_var.cfg_type;
	return *this;
}


#ifdef	DEBUG
#include <iostream>
using std::cout;
using std::endl;

void node::print_node()
{
	cout<<endl;
	cout<<"type:\t";
	if(cfg_type == NODE_TYPE)
	{
		cout<<"%type"<<endl;
	}else if(cfg_type == NODE_TOKEN)
	{
		cout<<"%token"<<endl;
	}else
	{
		cout<<"**** unkown type"<<endl;
	}
	cout<<"name:\t"<<name<<endl;

	unsigned int i = 0;
	unsigned int j = 0;
	for (list<list<node::var> >::iterator it = r_rules.begin();
		it != r_rules.end(); it++, i++ )
	{
		cout<<"r_rules["<<i<<"]\t";
		j = 0;
		for (list<node::var>::iterator jt =(*it).begin();
			jt != (*it).end(); jt++, j++)
		{
			cout<<"["<<j<<"]=("<<jt->name<<","<<jt->usr_type<<",";
			if((*jt).cfg_type == NODE_TYPE)
			{
				cout<<"TYP)\t";
			}else if((*jt).cfg_type == NODE_TOKEN)
			{
				cout<<"TKN)\t";
			}else if((*jt).cfg_type == NODE_STR)
			{
				cout<<"STR)\t";
			}else
			{
				cout<<"UKW)\t";
			}
		}
		cout<<endl;
	}
}
#endif
