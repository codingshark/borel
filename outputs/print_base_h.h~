#ifndef PRINT_BASE_H_H_
#define PRINT_BASE_H_H_

#include "symbol_base.h"
#include "std::string.h"
class print_base_h :public symbol_base
{
	public:
		print_base_h();
		print_base_h(const print_base_h & a_print_base_h);
		virtual ~print_base_h();
		print_base_h & operator = (const print_base_h & a_print_base_h);
		void setprint_base_h(const std::string & a_upper_name1, const std::string & a_upper_name4, const std::string & a_class_name9, const std::string & a_class_name14, const std::string & a_class_name17, const std::string & a_class_name19, const std::string & a_class_name21, const std::string & a_class_name24, const std::string & a_class_name27, const std::string & a_class_name29, const std::string & a_class_name31, const std::string & a_class_name35);

		void print_this(std::ostream & out);
	public:
		print_base_h * duplicate();
	private:
		std::string	upper_name1;
		std::string	upper_name4;
		std::string	class_name9;
		std::string	class_name14;
		std::string	class_name17;
		std::string	class_name19;
		std::string	class_name21;
		std::string	class_name24;
		std::string	class_name27;
		std::string	class_name29;
		std::string	class_name31;
		std::string	class_name35;
};
#endif
