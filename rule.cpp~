#include "rule.h"

rule::rule ()
{
}

rule::rule(const rule & a_rule)
{
	name = a_rule.name;
	productions = a_rule.productions;
}

rule::~rule ()
{
}

rule & rule::operator = (const rule & a_rule)
{
	name = a_rule.name;
	productions = a_rule.productions;
	
	return *this;
}

void rule::clear()
{
	name = "";
	productions.clear();
}

rule::symbol::symbol(const string & a_name, int a_cfg_type):
	name(a_name), cfg_type(a_cfg_type)
{
}

rule::symbol::symbol(const symbol & a_symbol)
{
	name = a_symbol.name;
	cfg_type = a_symbol.cfg_type;
}

rule::symbol::~symbol()
{
}

rule::symbol & rule::symbol::operator = (const rule::symbol & a_symbol)
{
	name = a_symbol.name;
	cfg_type = a_symbol.cfg_type;
	return *this;
}


#ifdef	DEBUG
#include <iostream>
using std::cout;
using std::endl;

void rule::print_rule() const
{
	cout<<endl;
	cout<<"name:\t"<<name<<endl;

	unsigned int i = 0;
	unsigned int j = 0;
	for (list<list<rule::symbol> >::const_iterator it = productions.begin();
		it != productions.end(); it++, i++ )
	{
		cout<<"productions["<<i<<"]\t";
		j = 0;
		for (list<rule::symbol>::const_iterator jt =(*it).begin();
			jt != (*it).end(); jt++, j++)
		{
			cout<<"["<<j<<"]=("<<jt->name<<",";
			if((*jt).cfg_type == RULE_TYPE)
			{
				cout<<"TYP)\t";
			}else if((*jt).cfg_type == RULE_TOKEN)
			{
				cout<<"TKN)\t";
			}else if((*jt).cfg_type == RULE_STR)
			{
				cout<<"STR)\t";
			}else
			{
				cout<<"UKW)\t";
			}
		}
		cout<<endl;
	}
	cout<<endl;
	cout<<"hash_code: "<<endl;
	for (unsigned int k = 0; kk < hash_code.size(); k += 1)
	{
		cout<<hash_code[k]<<" ";
	}
	cout<<endl;
}
#endif
