
//print_base_h
%type <> print_base_h
%token <std::string> class_name
%token <std::string> upper_name
//

//print_derived_h
%type <> print_derived_h
%type <> include_file_list
%type <> include_file
%type <> set_method_arg_list
%type <> set_method_arg
%type <> arg_type
%type <> data_member_inst
%type <> data_member_list
%type <> data_member_declaration

%token <std::string> include_file_name
%token <std::string> base_of_drived
%token <std::string> data_member_name
%token <unsigned int> data_member_index
%token <std::string> data_member_type
//

//print_derived_cpp
%type <> print_derived_cpp
%type <> copy_list
%type <> assignment
%type <> deconstruction_list
%type <> deconstruction
%type <> construction_list
%type <> construction
%type <> print_list
%type <> print_data_member
%type <> set_list
%type <> set_data_member
%type <> assert_stmt
%type <> duplicate_list
%type <> duplicate_data_member

%token <std::string> str_member
//

%%

print_base_h:
	"#ifndef " upper_name "_H_\n"
	"#define " upper_name "_H_\n"
	"#include <iostream>\n"
	"#include \"symbol_base.h\"\n"
	"class " class_name " :public symbol_base\n"
	"{\n"
	"\tpublic:\n"
	"\t\t" class_name "(){};\n"
	"\t\t" class_name "(const " class_name " & a_" class_name "){}\n"
	"\t\tvirtual ~" class_name "(){};\n"
	"\t\tvirtual " class_name "& operator = (const " class_name " & a_" class_name "){};\n"
	"\t\tvirtual void print_this(std::ostream & out){};\n"
	"\t\tvirtual " class_name " * duplicate(){};\n"
	"};\n"
	"#endif\n\n"
	;

print_derived_h:
	"#ifndef " upper_name "_H_\n"
	"#define " upper_name "_H_\n"
	include_file_list
	"#include <iostream>\n"
	"class " class_name " :public " base_of_drived "\n"
	"{\n"
	"\tpublic:\n"
	"\t\t" class_name "(){};\n"
	"\t\t" class_name "(const " class_name " & a_" class_name ");\n"
	"\t\tvirtual ~" class_name "();\n"
	"\t\t" class_name "& operator = (const " class_name " & a_" class_name ");\n"
	
	"\t\tvoid set" class_name "(" set_method_arg_list ");\n"
	
	"\t\tvoid print_this(std::ostream & out);\n"
	"\t\t" class_name " * duplicate();\n"
	"\tprivate:"
	data_member_list
	"};\n"
	"#endif\n\n"
	;

include_file_list:
	include_file_list include_file
|	include_file
	;

include_file:
	"#include \"" include_file_name ".h\"\n"
	;

set_method_arg_list:
	set_method_arg_list ", " set_method_arg
|	set_method_arg
	;

set_method_arg:
	arg_type " a_" data_member_inst
	;

arg_type:
	"const " data_member_type " & "
|	data_member_type " * "
	;

data_member_inst:
	"m_" data_member_name data_member_index
	;

data_member_list:
	data_member_list data_member_declaration
|	data_member_declaration
	;

data_member_declaration:
	data_member_type "\t" data_member_inst ";\n"
|	data_member_type " *\t" data_member_inst ";\n"
	;
	
	
print_derived_cpp:
	"#include \"" class_name ".h\"\n"
	class_name "::" class_name "()\n"
	"{\n"
	construction_list
	"}\n"
	
	class_name "::" class_name "(const " class_name " & a_" class_name ")\n"
	"{\n"
	copy_list
	"}\n"
	
	class_name "::~" class_name "()\n"
	"{\n"
	deconstruction_list
	"}\n"
	
	class_name " & " class_name "::operator = (const " class_name " & a_" class_name ")\n"
	"{\n"
	copy_list
	"}\n"
	
	"void " class_name "::print_this(std::ostream & out)\n"
	"{\n"
	print_list
	"}\n"
	
	"void" class_name "::set" class_name "(" set_method_arg_list ")\n"
	"{\n"
	set_list
	"}\n"
	
	class_name " * " class_name "::duplicate()\n"
	"{\n"
	class_name " * a_copy = new " class_name ";\n"
	duplicate_list
	"return a_copy;"
	"}\n"
	;

copy_list:
	copy_list assignment
|	assignment
	;

assignment:
	data_member_inst " = a_" class_name "." data_member_inst
|	"if(a_" class_name "." data_member_inst " != NULL)\n"
	"{\n"
	data_member_inst " = a_" class_name "." data_member_inst ";\n"
	"}else{\n"
	data_member_inst " = NULL;\n"
	"}\n"
	;

deconstruction_list:
	deconstruction_list deconstruction
|	deconstruction
	;

deconstruction:
	"if( " data_member_inst "!= NULL )\n"
	"{\n"
	"\tdelete " data_member_inst ";\n"
	"}\n"
|	//
	;
	
construction_list:
	construction_list construction
|	construction
	;
	
construction:
	data_member_inst " = NULL;\n"
|	//
	;

print_list:
	print_list print_data_member
|	print_data_member
	;

print_data_member:
	"if( " data_member_inst "!= NULL )\n"
	"{\n"
	"\t" data_member_inst "->print_this(out);\n"
	"}\n"
|	"out<<" data_member_inst ";\n"
|	"out<<" str_member ";\n"
	;

set_list:
	set_list set_data_member
|	set_data_member
	;
	
set_data_member:
	assert_stmt data_member_inst " = a_" data_member_inst
	;
	
assert_stmt:
	"assert( a_" data_member_inst " != NULL);\n"
|	//
	;	
	
duplicate_list:
	duplicate_list duplicate_data_member
|	duplicate_data_member
	;

duplicate_data_member:
	"if( " data_member_inst "!= NULL )\n"
	"{\n"
	"\ta_copy->" data_member_inst " = " data_member_inst "->duplicate();\n"
	"}else{\n"
	data_member_inst " = NULL\n"
	"}\n"
|	"\ta_copy->" data_member_inst " = " data_member_inst ";\n"
	;
	
	

